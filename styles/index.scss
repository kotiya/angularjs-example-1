$primary-color: #b83f45;
$secondary-color: #949494;
$accent-color: #59A193;
$background-color: #f5f5f5;
$text-color: #111111;
$placeholder-color: rgba(0, 0, 0, 0.4);

@mixin placeholder-style {
  font-style: italic;
  font-weight: 400;
  color: $placeholder-color;
}

@mixin button-reset {
  margin: 0;
  padding: 0;
  border: 0;
  background: none;
  font-size: 100%;
  vertical-align: baseline;
  font-family: inherit;
  font-weight: inherit;
  color: inherit;
  appearance: none;
  -webkit-appearance: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin input-reset {
  margin: 0;
  padding: 0;
  border: none;
  background: rgba(0, 0, 0, 0.003);
  box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0.03);
}

@mixin input-placeholder-style {
  &::-webkit-input-placeholder {
    @include placeholder-style;
  }

  &::-moz-placeholder {
    @include placeholder-style;
  }

  &::input-placeholder {
    @include placeholder-style;
  }
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin background-image($url) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-position: center left;
}

@mixin toggle-label($color) {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 45px;
  height: 65px;
  font-size: 0;
  position: absolute;
  top: -65px;
  left: 0;

  &:before {
    content: '❯';
    display: inline-block;
    font-size: 22px;
    color: $color;
    padding: 10px 27px 10px 27px;
    transform: rotate(90deg);
  }
}

@mixin destroy-style {
  display: none;
  position: absolute;
  top: 0;
  right: 10px;
  bottom: 0;
  width: 40px;
  height: 40px;
  margin: auto 0;
  font-size: 30px;
  color: $secondary-color;
  transition: color 0.2s ease-out;

  &:after {
    content: '×';
    display: block;
    height: 100%;
    line-height: 1.1;
  }
}

@mixin hover-destroy {
  &:hover,
  &:focus {
    color: #C18585;
  }
}

@mixin edit-style {
  display: none;
}

@mixin todo-count-style {
  float: left;
  text-align: left;
}

@mixin filter-style {
  margin: 0;
  padding: 0;
  list-style: none;
  position: absolute;
  right: 0;
  left: 0;
}

@mixin filter-link-style {
  color: inherit;
  margin: 3px;
  padding: 3px 7px;
  text-decoration: none;
  border: 1px solid transparent;
  border-radius: 3px;

  &:hover {
    border-color: #DB7676;
  }

  &.selected {
    border-color: #CE4646;
  }
}

@mixin clear-completed-style {
  float: right;
  position: relative;
  line-height: 19px;
  text-decoration: none;
  cursor: pointer;

  &:hover {
    text-decoration: underline;
  }
}

@mixin info-style {
  margin: 65px auto 0;
  color: #4d4d4d;
  font-size: 11px;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
  text-align: center;

  p {
    line-height: 1;
  }

  a {
    color: inherit;
    text-decoration: none;
    font-weight: 400;

    &:hover {
      text-decoration: underline;
    }
  }
}

@function darken($color, $amount) {
  @return mix(black, $color, $amount);
}

@function lighten($color, $amount) {
  @return mix(white, $color, $amount);
}

@function mix($color1, $color2, $weight) {
  $r1: red($color1);
  $g1: green($color1);
  $b1: blue($color1);

  $r2: red($color2);
  $g2: green($color2);
  $b2: blue($color2);

  $weight = $weight / 100;

  $r: ($r2 - $r1) * $weight + $r1;
  $g: ($g2 - $g1) * $weight + $g1;
  $b: ($b2 - $b1) * $weight + $b1;

  @return rgb($r, $g, $b);
}

@function rgba($color, $alpha) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  @return rgba($r, $g, $b, $alpha);
}

@function rem($pixels) {
  @return ($pixels / 16) + rem;
}

@function em($pixels, $base) {
  @return ($pixels / $base) + em;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function strip-unit-value($value) {
  @return $value / ($value * 0 + 1) + strip-unit($value);
}

@function strip-unit-unit($value) {
  @return unit($value);
}

@function unit($value) {
  @return unitless($value) ? '' : unit($value);
}

@function unitless($value) {
  @return not unit($value);
}

@function red($color) {
  @return extract($color, red);
}

@function green($color) {
  @return extract($color, green);
}

@function blue($color) {
  @return extract($color, blue);
}

@function extract($color, $component) {
  @return nth($color, index($component, red));
}

@function nth($list, $n) {
  @return nth($list, $n);
}

@function index